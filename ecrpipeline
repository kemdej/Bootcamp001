pipeline {
    agent any
    tools {
        maven "maven3"
        jdk "jdk8"
    }
    environment {
        registryCredential = 'ecr:us-east-2:awslogin'
        appRegistry = "080953309794.dkr.ecr.us-east-2.amazonaws.com/gitit"
        vprofileRegistry = "https://080953309794.dkr.ecr.us-east-2.amazonaws.com"
    }
    stages {
        stage('Fetch code') {
            steps {
               git branch: 'main', url: 'https://github.com/Cosley1/Bootcamp001.git'
            }
        }
        stage('UNIT TEST') {
            steps{
                sh 'mvn test'
            }
        }
        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4'
            }
            steps {
               withSonarQubeEnv('sonar') {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile_new \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
               }
              }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('docker build') {
        steps {
            script {
                 dockerimage = docker.build(appRegistry + ":$BUILD_NUMBER", "./docker/build/")
            }
           }
        }
        stage('upload to ECR') {
            steps{
                script{
                    docker.withRegistry( vprofileRegistry, registryCredential ){
                        dockerimage.push("$BUILD_NUMBER")
                        dockerimage.push('latest')
                    }
                }
            }
        }
    }

}



